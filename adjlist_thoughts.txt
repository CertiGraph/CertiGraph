
  
Adjacency List (CLRS)
`````````````````````
G points to a "spine" of length |V|, where the spine is a node* array
and a node is (dst, cost, node*)

G --> [ -]--> [1, a, -]--> [3, b -]--> \
	  [ -]--> \
      [ -]--> [3, c, -]--> \
      [ -]--> [1, d, -]--> \

Unclear from CLRS if multiple edges are allowed or supposed to be allowed.

I propose Dijkstra.
	Note: I don't allow multiple edges and I'm not sure if CLRS wants me to.

I propose Prim.
	WX, what is the status re: multiple edges?

I guess it's possible to do Bellman-Ford or Kruskal...
	You need a list of edges, much like the one below, which you can precompute/simulate
	But is that too much sorrow? Better to just use the below?



WX's "edgelist" -- is this a standard thing?
````````````````
just a linked list of length |E|, where the payload is a node
and a node is (src, dst, cost, node*)

G --> [0, 1, a, -]--> [0, 3, b -]--> [2, 3, c, -]--> [3, 1, d, -]--> \

and the order does not seem to matter?

I do not propose Dijkstra/Prim The potential reordering of edges means that finding 
	"all neighbors of vertex u" is not systematic

Kruskal is already done using this.

I propose Bellman-Ford.
	A bit faster than above representation,
	since you won't have to precompute/simulate the list of edges



Next big steps:

1. [AM] Dijkstra using AdjList, try to allow multiple edges b/w vertices. The algorithm can probably handle it as written. If the algorithm cannot handle it for some reason, that's interesting too. To do this, the math model will have to be expanded a little. It currently assumes one-edge-per-pair-of-verts.

2. [WX] In Kruskal you have done undirectedness using edgelist. How have you handled this? A condition that is possible:
```
   /--->---\
foo --->--- bar
   \---<---/	
```
Where foo points to bar with two edges of cost, say, $3, and bar points to foo with one edge of cost $3. How do you "match" the vertices off?

Aquinas' suggestion: a bijective function ```partner: E -> E``` that accepts an edge from ```a``` to ```b``` and returns the corresponding edge from ```b``` to ```a```. ```partner``` will reject the above. The graph must pass a "partner check" as a precondition.

3. [unassigned] Prim using AdjList, also allowing multiple edges b/w vertices, also hopefully using the same algorithm. Note that this is _multiple edges_ using _undirected graphs_, and so a question that has not bothered us before is going to. See above.

4. [distant; unassigned] Bellman-Ford using edgelist

5. [distant; unassigned] Floyd-Warshall using AdjMat
