1. Undirected graph/MST definitions:
Please check the following files:
-undirected_graph.v
-mst.v
Do you think this idea of connectedness and spanning_tree is acceptable?
So every graph is effectively directed, undirected properties are built over it
I think it makes sense because every graph representation in C is directed, so no point explicitly defining undirected graphs
And every directed graph has an underlying undirected graph
However, do you want to be able to talk about mixed graphs in the future?
If so, then undirected edges must be explicitly defined, as in the wiki page for mixed graphs

2. Edgearray representation
a) I don't understand what SDAG is in dijkstra and its importance
Because of this, I'm not sure what I'm doing by defining SWEG
UnionFind doesn't have such a thing
b) My graph_rep in spatial_wedgearray_graph.v has an issue
Basically, in the C file I malloc a SIZE array of edges
However, not all edges are used, e.g. in init_empty_graph there are no edges
Edges are slowly added over time (not removed in kruskal, so we don't have to deal with that)
So, in the graph_rep I think I need something like
(tarray t_struct_edge N ...) * (memory_block ...)
To represent the existing edges, and the rest of the array
Can you look and give some advice?
c) If the problem can't be dealt with elegantly, I'm thinking change it into a linked list of edges
VST has a queue.c that is very suitable, all I have to do is just add an extra (int c)

3. Proof (*probably the most important issue*)
I started trying to work on init_empty_graph, and immediately get a complaint about invalid expression at the first forward_call:
typecheck_error (invalid_expression (sizeof(Tstruct _graph noattr))%expr)
Not sure what the problem is.
I looked at verif_unionfind_arr where the first thing in makeSet is the same mallocN, and they don't seem to have this problem

Also, I'm thinking that are too many mallocNs running around
So I tried to make a mallocN.h and matching malloc_spec.v, and have everyone reference them
Problem is clightgen won't process a header file with only an extern, and has issues even if I move it to a mallocN.c.  Consequently mallocN_spec.v will complain about there not being a _mallocN
But, I think I can overcome it by writing some unused function (say a freeN)
Advice on whether this is a good way to handle it