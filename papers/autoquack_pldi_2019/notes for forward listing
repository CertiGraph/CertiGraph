notes for forward listing

compat is
	super_compatible (g, t_info, roots) f_info outlier
		graph_thread_info_compatible g t
		fun_thread_arg_compatible g ti fi r
		roots_compatible g out r
		outlier_compatible g out
   	forward_p_compatible forward_p roots g from
		match p with
		| inl root_index => 0 <= root_index < Zlength roots
		| inr (v, n) =>
    		graph_has_v g v /\
    		0 <= n < Zlength (raw_fields (vlabel g v)) /\
    		raw_mark (vlabel g v) = false /\ vgeneration v <> from
  	forward_condition g t_info from to
		enough_space_to_copy g t_info from to
		graph_has_gen g from
		graph_has_gen g to
		copy_compatible g
		no_dangling_dst g

And so I write compat (g, t_info, f_info, outlier, from, to, forward_p)
where forward_p can be 
"Z", ie an index of the args array or "VType * Z", ie the Zth field of the vertex V.
We're eliding the first case, so I'm writing \exists v,n.~ forward_p = (v,n) in the pre

(Znth n (make_fields g v)) can be either (Z, GC_Pointer, or Etype)
- if it's Z, we fail is_block and we're done quickly. identity transformation for all seps
- if it's GC_pointer, we pass is_block, get through iop2p, and call is_from. two cases:
	+ yes, is from -- can get exfalso, since GCPtr is by construction not in from
	+ no, not in from -- done quickly, with indentity transformations for all seps
- if it's EType, we need to play the whole thing through

instead of va \in exptr, maybe we can just say va \in outlier?


