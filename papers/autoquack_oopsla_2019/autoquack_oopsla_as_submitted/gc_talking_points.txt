GC talking points

don't focus too much on the GC as a difficult example
basically our techniques rose to the occasion and got this done

overall purpose, outermost spec
	✓ context of CertiCoq, generational gc in the spirit of OCaml
	? state and explain the spec for garbage_collect
		✓ and how forward is the beast of burden
how forward works
	? its spec 
boundary issues
	? code snippet of pointer subtraction 
	explanation
explain is_from and int_or_ptr. 
	IF really necessary in any GC
	IOP is not necessary, but alternatives aren't realy much better. 
		it's not uncommon to use this trick. see AH's email re: this. 
	put in the code for these. explain where they're defined and undefined. 
	explain where we need them defined. 
	explain the semantics we need.
	have brought these issues to XLeroy. CC is satisfying the invariants for IsFrom, and we are hopeful that IF matches CC's external function specs. 
	TIOP is harder: pointer injections can have odd offsets. see XL email.
	... we don't actually have XL's issues in the GC. we are using them on malloc-ed spaces. we will have even boundaries and we'll be fine. but keeping track of this is hard and may require tweaks to compcert. in communication and working on it.
	althougth CC happens to satisfy IF, there are old/obscure archis where IF may not be proveable (segmented memory machines etc)


what is hard about the GC

the graph model changed not at all
	we added label to the whole graph. we are genuinely not iso in GC
	quite happy to add this change to our model; it doesn't change the other proofs at all

what was challenging
	- very aggressive re: complex C code. right at the edge of undefined behavior
	- interface between C and mathgraph: top level theorems and forward are exploring the graph in a connected way, but do_scan is making a linear array survey. 
	- proofs about these two views being okay... complex labels, edges, etc.
	- exposing these proofs to a compiler and making sure that the compiler's own invariants can use the GC. eg: compiler will never take an item from an older gen and point it to a newer gen.


within in generation, it's basically Cheney. 
two functions that are the bulk of the work: forward, and do_scan.
one other place: reset_heap, a single instruction that throws away a top of vertices


multigen
ocaml obect model
	boxed and unboxed -- pointers may point outside the heap
	variable obj lengths
purely func mutator

when I say undefined in C or defined in C, maybe always say "C light"


a list of changes made to the forward_listing_short code
	sz = size(hd) instead of wosize_hd
	removed the depth loop
	s, n, l instead of start, next, limit
	iop2p and p2iop instead of longer forms
	tabbed to one space instead of two
	finf, tinf instead of f_inf, t_inf. the underscores are too ugly in mathit
	throwing away forp. it's no longer necessary, since we are pre-splitting.
	gen_start --> start
	gen_size --> size

questions when making listing
	ok in line 1, shouldn't it be \exists v, n? how can p = (v,n) for all v, n?
	can finf, tinf, finf(finf,fi)*tinf(tinf,ti), etc be thrown away? just get a fake "args"?

alpha
	items elided:
		spatial: 
			outlier_rep outlier
		math facts: maybe add to compat???
			enough_space_to_copy g t_info from to
			graph_has_gen g from, graph_has_gen g to
			graph_has_v g v
			0 <= n < Zlength (raw_fields (vlabel g v))
	  		raw_mark (vlabel g v) = false
	  		vgeneration v <> from
			from <> to
	\tx{p} = vaddr(\gamma, v) + n is  
		"temp _p (offset_val (WORD_SIZE * n) (vertex_address g v))" in the code

omega
	items elided	
		spatial: none
		math facts: 
			enough_space_to_copy g t_info from to
			0 <= n < Zlength (raw_fields (vlabel g v))
	  		raw_mark (vlabel g v) = false

	code:
		$//$$\braces{\forall \ga, \m{\finf}, \m{\tinf}, \m{\out}, \m{from}, \m{to}, \m{v}, \m{n}.~ \null \\ \p{gc{\_}graph}(\ga) * \p{\finf}(\m{\finf}, \m{fi}) * \p{\tinf}(\m{\tinf}, \m{ti}) * \null \\ {\color{red}\p{\out}(\m{\out})} /| \null \\ \m{compat}(\ga, \m{\finf}, \m{\tinf}, \m{\out}, \m{from}, \m{to}) /| \null \\ \tx{s} = \m{start}(\ga, \m{from}) /| \tx{l} = \tx{s} + \m{size}(\ga, \m{from}) /| \null \\ \tx{n} = \m{naddr}(\m{\tinf}, \m{to}) /| \tx{p} = \m{vaddr}(\ga, \m{v}) + \m{n} /| \null \\ {\color{red} \m{ghas}(\ga, \m{from}) /| \m{ghas}(\ga, \m{to}) /| \m{ghas}(\ga, \m{v})} /| \null \\ {\color{red}\m{from} \neq \m{to} /| \m{gen}(v) \neq \m{from}}} \omega$

beta
	ok (\gamma, v)[n] = e is 
		"Heqf : Znth n (make_fields g v) = inr e" in the code
	ok \tx{v} = \m{v'} is
		\tx{_v} = (Vptr b i) in the code
		also nb, Heqv0: vertex_address g v' = Vptr b i and Heqv': v' = dst g e
		_v = vertex_address g (dst g e)
		\tx{v} = \m{vaddr}(\ga, (dst \ga, \m{e}))
	ok \m{v} |-> \m{v'} is 
		from an earlier draft, I'm not sure where it came from in code!

gamma, gamma', gamma''
	ok flds = (gamma, v') and v' |-> flds is trying to say that v' maps to the whole	array, without index. (gamma, v') is the array. by not putting an [index] I'm trying to say that it's the whole array 

delta
	the only new fact is H22 : raw_mark (vlabel g v') = true
	but maybe we can avoid going into raw_mark etc? 
	I'm just saying "\beta /| hd = 0", which is very clear
	should I instead say val(hdr) = 0?

epsilon
	this is complicated, since we actually broke it into two steps (and two ramification blocks) earlier: one for the read t = Fieldd(v,0) and one for the write *p = t.
	Now we are combining them.
	part 1 gives us facts about zooming in to v'. We get that flds'[0] has the copy.
	part 2 gives us facts about zooming in to v. 

zeta	
	should I instead say val(hdr) <> 0?

eta
	the fact about next is below. I'm not sure how to explain it.
		temp _next
       	(field_address heap_type
        	  [StructField _next; ArraySubsc (Z.of_nat to); StructField _spaces]
          		(ti_heap_p t_info));
eta+
	(Hr: Int.min_signed <= Zlength (raw_fields (vlabel g v')) <=
                       Int.max_signed)
    (Hi : 0 <= Z.of_nat to < Zlength (spaces (ti_heap t_info)))
    (Hh: has_space (Znth (Z.of_nat to) (spaces (ti_heap t_info)))
                                 (vertex_size g v'))
    (Hn: space_start (Znth (Z.of_nat to) (spaces (ti_heap t_info))) <>
                       nullval)
    ok some thread info stuff
    ok v1 = offset_val (WORD_SIZE * used_space sp_to) (space_start sp_to)
    ok H30 : force_val
          (sem_add_ptr_int tuint Signed
             (offset_val (WORD_SIZE * (used_space sp_to + 1)) (space_start sp_to))
             (eval_unop Oneg tint (vint 1))) = field_address tuint [] v1


final g1 is as follows:
              remember (lgraph_copy_v g (dst g e) to) as g'.
              remember (new_copied_v g to). (probably as v0)
              remember (labeledgraph_gen_dst g' e v0) as g1.



