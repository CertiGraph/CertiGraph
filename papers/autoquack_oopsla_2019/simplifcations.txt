
simplifications in forward_listing
``````````````````````````````````
	sz = size(hd) instead of wosize_hd
	removed the depth loop
	s, n, l instead of start, next, limit
	iop2p and p2iop instead of longer forms
	tabbed to one space instead of two
	finf, tinf instead of f_inf, t_inf. the underscores are too ugly in mathit
	throwing away forp. it's no longer necessary, since we are pre-splitting to the second branch.
	gen_start --> start
	gen_size --> size

questions when making listing
	can finf, tinf, finf(finf,fi)*tinf(tinf,ti), etc be thrown away? just get a fake "args"?

alpha
	items elided:
		spatial: 
			outlier_rep outlier
		math facts: maybe add to compat???
			enough_space_to_copy g t_info from to
			graph_has_gen g from, graph_has_gen g to
			graph_has_v g v
			0 <= n < Zlength (raw_fields (vlabel g v))
	  		raw_mark (vlabel g v) = false
	  		vgeneration v <> from
			from <> to
	\tx{p} = vaddr(\gamma, v) + n is  
		"temp _p (offset_val (WORD_SIZE * n) (vertex_address g v))" in the code

omega
	items elided	
		spatial: none
		math facts: 
			enough_space_to_copy g t_info from to
			0 <= n < Zlength (raw_fields (vlabel g v))
	  		raw_mark (vlabel g v) = false

	code:
		$//$$\braces{\forall \ga, \m{\finf}, \m{\tinf}, \m{\out}, \m{from}, \m{to}, \m{v}, \m{n}.~ \null \\ \p{gc{\_}graph}(\ga) * \p{\finf}(\m{\finf}, \m{fi}) * \p{\tinf}(\m{\tinf}, \m{ti}) * \null \\ {\color{red}\p{\out}(\m{\out})} /| \null \\ \m{compat}(\ga, \m{\finf}, \m{\tinf}, \m{\out}, \m{from}, \m{to}) /| \null \\ \tx{s} = \m{start}(\ga, \m{from}) /| \tx{l} = \tx{s} + \m{size}(\ga, \m{from}) /| \null \\ \tx{n} = \m{naddr}(\m{\tinf}, \m{to}) /| \tx{p} = \m{vaddr}(\ga, \m{v}) + \m{n} /| \null \\ {\color{red} \m{ghas}(\ga, \m{from}) /| \m{ghas}(\ga, \m{to}) /| \m{ghas}(\ga, \m{v})} /| \null \\ {\color{red}\m{from} \neq \m{to} /| \m{gen}(v) \neq \m{from}}} \omega$

beta
	ok (\gamma, v)[n] = e is 
		"Heqf : Znth n (make_fields g v) = inr e" in the code
	ok \tx{v} = \m{v'} is
		\tx{_v} = (Vptr b i) in the code
		also nb, Heqv0: vertex_address g v' = Vptr b i and Heqv': v' = dst g e
		_v = vertex_address g (dst g e)
		\tx{v} = \m{vaddr}(\ga, (dst \ga, \m{e}))
	ok \m{v} |-> \m{v'} is 
		from an earlier draft, I'm not sure where it came from in code!

gamma, gamma', gamma''
	ok flds = (gamma, v') and v' |-> flds is trying to say that v' maps to the whole	array, without index. (gamma, v') is the array. by not putting an [index] I'm trying to say that it's the whole array 

delta
	the only new fact is H22 : raw_mark (vlabel g v') = true
	but maybe we can avoid going into raw_mark etc? 
	I'm just saying "\beta /| hd = 0", which is very clear
	should I instead say val(hdr) = 0?

epsilon
	this is complicated, since we actually broke it into two steps (and two ramification blocks) earlier: one for the read t = Fieldd(v,0) and one for the write *p = t.
	Now we are combining them.
	part 1 gives us facts about zooming in to v'. We get that flds'[0] has the copy.
	part 2 gives us facts about zooming in to v. 

zeta	
	should I instead say val(hdr) <> 0?

eta
	the fact about next is below. I'm not sure how to explain it.
		temp _next
       	(field_address heap_type
        	  [StructField _next; ArraySubsc (Z.of_nat to); StructField _spaces]
          		(ti_heap_p t_info));
eta+
	(Hr: Int.min_signed <= Zlength (raw_fields (vlabel g v')) <=
                       Int.max_signed)
    (Hi : 0 <= Z.of_nat to < Zlength (spaces (ti_heap t_info)))
    (Hh: has_space (Znth (Z.of_nat to) (spaces (ti_heap t_info)))
                                 (vertex_size g v'))
    (Hn: space_start (Znth (Z.of_nat to) (spaces (ti_heap t_info))) <>
                       nullval)
    ok some thread info stuff
    ok v1 = offset_val (WORD_SIZE * used_space sp_to) (space_start sp_to)
    ok H30 : force_val
          (sem_add_ptr_int tuint Signed
             (offset_val (WORD_SIZE * (used_space sp_to + 1)) (space_start sp_to))
             (eval_unop Oneg tint (vint 1))) = field_address tuint [] v1


final g1 is as follows:
              remember (lgraph_copy_v g (dst g e) to) as g'.
              remember (new_copied_v g to). (probably as v0)
              remember (labeledgraph_gen_dst g' e v0) as g1.





simplifications in do_scan_listing
``````````````````````````````````
1. st, li, sc, nx instead of from_start, from_limit, scan, next
2. DEPTH gone
3. ignoring shares
4. simplification in to_index... just calling it scan_start(gamma,to)
in practice it's called to be equal to the _old_ next value, and this is something we mention as a performance "bug" in our autoquack \S6.4.
5. skipping over no_scan_tag because it's fairly obvious. You may want to explain it a little iny our writing.

Questions:
1. I think blocksize(hd) is a little silly, we should just make it len(flds). Then the 
loop that follows will be easy to explain, it's just a classic list map
2. Remove no_scan_tag stuff?
3. We're getting caught with our pants down re: forward_relation. It currently does not mention p for reasons of presentation. Now we're forwarding many many things and it's not so easy to wave our hands. 
