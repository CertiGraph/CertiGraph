GC talking points

don't focus too much on the GC as a difficult example
basically our techniques rose to the occasion and got this done

overall purpose, outermost spec
	✓ context of CertiCoq, generational gc in the spirit of OCaml
	? state and explain the spec for garbage_collect
		✓ and how forward is the beast of burden
how forward works
	? its spec 
boundary issues
	? code snippet of pointer subtraction 
	explanation
explain is_from and int_or_ptr. 
	IF really necessary in any GC
	IOP is not necessary, but alternatives aren't realy much better. 
		it's not uncommon to use this trick. see AH's email re: this. 
	put in the code for these. explain where they're defined and undefined. 
	explain where we need them defined. 
	explain the semantics we need.
	have brought these issues to XLeroy. CC is satisfying the invariants for IsFrom, and we are hopeful that IF matches CC's external function specs. 
	TIOP is harder: pointer injections can have odd offsets. see XL email.
	... we don't actually have XL's issues in the GC. we are using them on malloc-ed spaces. we will have even boundaries and we'll be fine. but keeping track of this is hard and may require tweaks to compcert. in communication and working on it.
	althougth CC happens to satisfy IF, there are old/obscure archis where IF may not be proveable (segmented memory machines etc)


what is hard about the GC
`````````````````````````
the graph model changed not at all
	we added label to the whole graph. we are genuinely not iso in GC
	quite happy to add this change to our model; it doesn't change the other proofs at all

what was challenging
	- very aggressive re: complex C code. right at the edge of undefined behavior
	- interface between C and mathgraph: top level theorems and forward are exploring the graph in a connected way, but do_scan is making a linear array survey. 
	- proofs about these two views being okay... complex labels, edges, etc.
	- exposing these proofs to a compiler and making sure that the compiler's own invariants can use the GC. eg: compiler will never take an item from an older gen and point it to a newer gen.


within in generation, it's basically Cheney. 
two functions that are the bulk of the work: forward, and do_scan.
one other place: reset_heap, a single instruction that throws away a ton of vertices

the composition of all these relations gives you correctness vis the C code in the end

forward_roots
do_scan
calculating the sizes

multigen
ocaml obect model
	boxed and unboxed -- pointers may point outside the heap
	variable obj lengths
purely func mutator

when I say undefined in C or defined in C, maybe always say "C light"
