Require Import Coq.Logic.ProofIrrelevance.
Require Import Coq.Sets.Ensembles.
Require Import Coq.Sets.Finite_sets.
Require Import VST.msl.Coqlib2.
Require Import RamifyCoq.lib.Coqlib.
Require Import RamifyCoq.lib.EquivDec_ext.
Require Import RamifyCoq.lib.Ensembles_ext.
Require Import Coq.Lists.List.
Require Import RamifyCoq.graph.graph_model.
Require Import RamifyCoq.graph.subgraph2.

Section PREGRAPH_GEN.

Context {V E: Type}.
Context {EV: EqDec V eq}.
Context {EE: EqDec E eq}.

Notation Graph := (PreGraph V E).

Definition empty_pregraph (v0: V): Graph :=
  @Build_PreGraph V E EV EE (fun v => False) (fun e => False) (fun e => v0) (fun e => v0).

Definition single_vertex_pregraph (v0: V): Graph :=
  @Build_PreGraph V E EV EE (eq v0) (fun e => False) (fun e => v0) (fun e => v0).

Definition union_pregraph (PV : V -> Prop) (PE: E -> Prop) (PVD: forall v, Decidable (PV v)) (PED: forall e, Decidable (PE e)) (g1 g2: Graph): Graph :=
  @Build_PreGraph V E EV EE
    (fun v => if PVD v then vvalid g1 v else vvalid g2 v)
    (fun e => if PED e then evalid g1 e else evalid g2 e)
    (fun e => if PED e then src g1 e else src g2 e)
    (fun e => if PED e then dst g1 e else dst g2 e).

Lemma pregraph_join_empty_single: forall v0 v1,
  pregraph_join (eq v0) (Empty_set _) (empty_pregraph v1) (single_vertex_pregraph v0).
Proof.
  intros.
  unfold empty_pregraph, single_vertex_pregraph.
  split; [| split; [| split]]; simpl.
  + split; intros.
    - destruct_eq_dec v0 a; tauto.
    - auto.
  + split; intros.
    - tauto.
    - auto.
  + intros; tauto.
  + intros; tauto.
Qed.

End PREGRAPH_GEN.

Section LABELED_GRAPH_GEN.

Context {V E: Type}.
Context {EV: EqDec V eq}.
Context {EE: EqDec E eq}.
Context {DV DE: Type}.

Notation Graph := (LabeledGraph V E DV DE).

Local Coercion pg_lg : LabeledGraph >-> PreGraph.

Definition empty_labeledgraph (v0: V) (v_default: DV) (e_default: DE): Graph :=
  @Build_LabeledGraph V E EV EE DV DE (empty_pregraph v0) (fun v => v_default) (fun e => e_default).

Definition single_vertex_labeledgraph (v0: V) (v_default: DV) (e_default: DE): Graph :=
  @Build_LabeledGraph V E EV EE DV DE (single_vertex_pregraph v0) (fun v => v_default) (fun e => e_default).

Definition update_vlabel (vlabel: V -> DV) (x: V) (d: DV) :=
  fun v => if equiv_dec x v then d else vlabel v.

Definition update_dst (destination : E -> V) (e : E) (target: V) :=
  fun v => if equiv_dec e v then target else destination v.

Definition labeledgraph_vgen (g: Graph) (x: V) (a: DV) : Graph := Build_LabeledGraph _ _ g (update_vlabel (vlabel g) x a) (elabel g).

Definition pregraph_gen_dst (g : PreGraph V E) (e : E) (t : V) :=
  @Build_PreGraph V E EV EE (vvalid g) (evalid g) (src g) (update_dst (dst g) e t).

Definition labeledgraph_gen_dst (g : Graph) (e : E) (t : V) :=
  Build_LabeledGraph _ _ (pregraph_gen_dst g e t) (vlabel g) (elabel g).

Lemma lg_vgen_stable: forall (g: Graph) (x: V) (d: DV),
  (predicate_partial_labeledgraph g (Complement V (eq x))) ~=~
   (predicate_partial_labeledgraph (labeledgraph_vgen g x d) (Complement V (eq x)))%LabeledGraph.
Proof.
  intros.
  split; [| split].
  + simpl.
    reflexivity.
  + intros; simpl.
    unfold update_vlabel.
    if_tac; auto.
    destruct H.
    exfalso; apply H2, H1.
  + intros; simpl.
    reflexivity.
Qed.

End LABELED_GRAPH_GEN.

(*
Section LABELED_GRAPH_EXPAND.

Context {V E: Type}.
Context {EV: EqDec V eq}.
Context {EE: EqDec E eq}.
Context {DV DE: Type}.

Notation Graph := (LabeledGraph V E DV DE).

Definition expand_vvalid (g: PreGraph V E) (vs: list V) := fun v => vvalid g v \/ In v vs.

Definition expand_evalid (g: PreGraph V E) (es: list E) := fun e => evalid g e \/ In e es.

Definition expand_src (g: PreGraph V E) (es: list E) (src': E -> V) :=
  fun e => if in_dec equiv_dec e es then src' e else src g e.

Definition expand_dst (g: PreGraph V E) (es: list E) (dst': E -> V) :=
  fun e => if in_dec equiv_dec e es then dst' e else dst g e.

Definition expand_vlabel (g: Graph) (vs: list V) (src': E -> V) :=
  fun e => if in_dec equiv_dec e es then src' e else src g e.

Definition pregraph_expand (g: PreGraph V E) vs es src' dst' :=
  @Build_PreGraph V E EV EE (expand_vvalid g vs) (expand_evalid g es)
   (expand_src g es src') (expand_dst g es dst').

Definition labeledgraph_expand (g: Graph) vs es src' dst' :=
  @Build_PreGraph V E EV EE (expand_vvalid g vs) (expand_evalid g es)
   (expand_src g es src') (expand_dst g es dst').

End LABELED_GRAPH_EXPAND.
*)
Section GENERAL_GRAPH_GEN.

Context {V E: Type}.
Context {EV: EqDec V eq}.
Context {EE: EqDec E eq}.
Context {DV DE: Type}.
Context {P: LabeledGraph V E DV DE -> Type}.

Notation Graph := (GeneralGraph V E DV DE P).

Local Coercion pg_lg : LabeledGraph >-> PreGraph.
Local Coercion lg_gg : GeneralGraph >-> LabeledGraph.

Definition generalgraph_vgen (g: Graph) (x: V) (d: DV) (sound': P _): Graph := @Build_GeneralGraph V E EV EE DV DE P (labeledgraph_vgen g x d) sound'.

Definition generalgraph_gen_dst (g: Graph) (e : E) (t : V)
           (sound' : P _) : Graph :=
  @Build_GeneralGraph V E EV EE DV DE P (labeledgraph_gen_dst g e t) sound'.

Lemma gen_dst_preserve_bi: forall (g: PreGraph V E) e t left_edge right_edge,
    BiGraph g left_edge right_edge -> BiGraph (pregraph_gen_dst g e t) left_edge right_edge.
Proof.
  intros. apply Build_BiGraph; intros.
  + apply (bi_consist g); auto.
  + simpl. apply (only_two_edges g); auto.
Qed.

Lemma gen_dst_preserve_math: forall (g: PreGraph V E) e t (M: MathGraph g),
    weak_valid g t -> MathGraph (pregraph_gen_dst g e t).
Proof.
  intros. refine (Build_MathGraph (pregraph_gen_dst g e t) (is_null g) (is_null_dec g) _ (valid_not_null g)).
  simpl. intros. apply (valid_graph g) in H0. destruct H0. split.
  + auto.
  + unfold update_dst.
    destruct_eq_dec e e0.
    - apply H.
    - apply H1.
Defined.

Lemma gen_dst_preserve_finite: forall (g: PreGraph V E) e t, FiniteGraph g -> FiniteGraph (pregraph_gen_dst g e t).
Proof.
  intros. apply Build_FiniteGraph; simpl.
  + apply finiteV.
  + apply finiteE.
Qed.

End GENERAL_GRAPH_GEN.

Section ADD_GRAPH_GEN.

  Context {V E: Type}.
  Context {EV: EqDec V eq}.
  Context {EE: EqDec E eq}.
  Context {DV DE: Type}.
  Notation Gph := (PreGraph V E).

  Variable g: Gph.
  Variable left_out_edge right_out_edge: V -> E.
  Context {BI: BiGraph g left_out_edge right_out_edge}.
  Context {MA: MathGraph g}.
  Context {FA: FiniteGraph g}.
  
  Definition change_vvalid (v: V): Ensemble V :=
    fun n => vvalid g n \/ n = v.
  
  Definition change_node_pred (P: NodePred V) (v: V) (Pv: {Pv : Prop & {Pv} + {~ Pv}}) : NodePred V.
  Proof.
    intros.
    exists (fun n: V => (if equiv_dec n v then projT1 Pv else P n)).
    intros.
    destruct_eq_dec x v.
    + destruct Pv; auto.
    + destruct P; simpl; auto.
  Defined.

  Definition change_evalid v : Ensemble E := fun e => evalid g e \/ src g e = v.

  Definition change_dst (v l r: V) : E -> V :=
    fun e => 
      if equiv_dec e (left_out_edge v)
      then l
      else if equiv_dec e (right_out_edge v)
           then r
           else dst g e.

  Definition update_PreGraph v l r : Gph :=
    Build_PreGraph EV EE (change_vvalid v) (change_evalid v) (src g) (change_dst v l r).

  Definition update_BiGraph v l r: BiGraph (update_PreGraph v l r) left_out_edge right_out_edge.
  Proof.
    refine (Build_BiGraph _ _ _ _ _).
    + unfold update_PreGraph; simpl.
      intros; apply (bi_consist g).
      destruct H; auto.
    + unfold update_PreGraph; simpl; apply (only_two_edges g).
  Defined.

  Definition in_math (v l r: V) : Type :=
    forall y, In y (l :: r :: nil) -> {vvalid g y} + {y = v} + {is_null g y}.

  Definition update_MathGraph v l r (Hi: in_math v l r) (Hn: ~ is_null g v): MathGraph (update_PreGraph v l r).
  Proof.
    refine (Build_MathGraph _ (is_null g) (is_null_dec g) _ _).
    + unfold update_PreGraph, change_vvalid, change_evalid, change_dst; simpl.
      intros.
      destruct_eq_dec (src g e) v.
      - split; [right; auto |].
        destruct (left_or_right g BI v e H0); [destruct (Hi l) | destruct (Hi r)]; simpl; tauto.
      - assert (evalid g e) by tauto.
        apply (valid_graph g) in H1.
        unfold weak_valid in H1.
        tauto.
    + unfold update_PreGraph, change_vvalid; simpl.
      intros.
      destruct H; [| subst]; auto.
      apply (valid_not_null g) with x; tauto.
  Defined.

  Definition update_FiniteGraph v l r: FiniteGraph (update_PreGraph v l r).
  Proof.
    refine (Build_FiniteGraph _ _ _); unfold update_PreGraph, change_vvalid, change_evalid, change_dst; simpl.
    + destruct FA as [? _]. unfold EnumEnsembles.Enumerable, Ensembles.In in *.
      destruct finiteV as [l0 [? ?]]. destruct (in_dec equiv_dec v l0).
      - exists l0. split; auto. intro. split; intros.
        * left. apply H0 in H1. auto.
        * destruct H1; [rewrite H0 | subst]; auto.
      - exists (v :: l0). split. constructor; auto. intros. split; intro.
        * destruct H1; [right | left]. auto. specialize (H0 x); intuition.
        * simpl. destruct H1; [right | left]; auto. specialize (H0 x); intuition.
    + destruct FA as [_ ?]. unfold EnumEnsembles.Enumerable, Ensembles.In in *.
      destruct finiteE as [l0 [? ?]].
      destruct (in_dec equiv_dec (left_out_edge v) l0); destruct (in_dec equiv_dec (right_out_edge v) l0).
      - exists l0. split; auto. intros; split; intros.
        left; specialize (H0 x); intuition. destruct H1.
        * specialize (H0 x); intuition.
        * destruct BI. specialize (only_two_edges v x). rewrite only_two_edges in H1.
          destruct H1; subst; auto.
      - remember (left_out_edge v) as e1. remember (right_out_edge v) as e2. exists (e2 :: l0).
        split. constructor; auto. intro; split; intro.
        * destruct H1; [right | left]. subst x. subst e2. destruct BI.
          rewrite only_two_edges. right; auto. specialize (H0 x); intuition.
        * simpl. destruct H1. right; specialize (H0 x); intuition. destruct BI.
          rewrite only_two_edges in H1. destruct H1.
          Focus 1. { right. subst e1. subst x. auto. } Unfocus.
          Focus 1. { left. subst e2. subst x. auto. } Unfocus.
      - remember (left_out_edge v) as e1. remember (right_out_edge v) as e2. exists (e1 :: l0).
        split. constructor; auto. intro; split; intro.
        * destruct H1; [right | left]. subst x. subst e1. destruct BI.
          rewrite only_two_edges. left; auto. specialize (H0 x); intuition.
        * simpl. destruct H1. right; specialize (H0 x); intuition. destruct BI.
          rewrite only_two_edges in H1. destruct H1.
          Focus 1. { left. subst e1. subst x. auto. } Unfocus.
          Focus 1. { right. subst e2. subst x. auto. } Unfocus.
      - remember (left_out_edge v) as e1. remember (right_out_edge v) as e2. exists (e1 :: e2 :: l0). split.
        * constructor. intro. destruct H1; auto. destruct BI.
          specialize (bi_consist v). subst. auto. constructor; auto.
        * intro. split; intro.
          Focus 1. {
            simpl in H1. destruct H1; [|destruct H1].
            + right. subst x. subst e1. destruct BI. rewrite only_two_edges. left; auto.
            + right. subst x. subst e2. destruct BI. rewrite only_two_edges. right; auto.
            + left. specialize (H0 x). intuition.
          } Unfocus.
          Focus 1. {
            destruct H1.
            + simpl. right; right. specialize (H0 x). intuition.
            + destruct BI. rewrite only_two_edges in H1. simpl. destruct H1.
              - left. subst x. subst e1. auto.
              - right; left. subst x. subst e2. auto.
          } Unfocus.
  Qed.
End ADD_GRAPH_GEN.

Section ADD_LABELED_GRAPH_GEN.

  Context {V E: Type}.
  Context {EV: EqDec V eq}.
  Context {EE: EqDec E eq}.
  Context {DV DE: Type}.
  
  Notation Graph := (LabeledGraph V E DV DE).

  Local Coercion pg_lg: LabeledGraph >-> PreGraph.

  Variable g: Graph.
  Variable left_out_edge right_out_edge: V -> E.
  Context {BI: BiGraph g left_out_edge right_out_edge}.

  Definition update_LabeledGraph (x l r: V) :=
    Build_LabeledGraph _ _ (update_PreGraph g left_out_edge right_out_edge x l r) (vlabel g) (elabel g).

End ADD_LABELED_GRAPH_GEN.

Section ADD_GENERAL_GRAPH_GEN.

  Context {V E: Type}.
  Context {EV: EqDec V eq}.
  Context {EE: EqDec E eq}.
  Context {DV DE: Type}.
  Context {P: LabeledGraph V E DV DE -> Type}.
  
  Notation Graph := (GeneralGraph V E DV DE P).

  Local Coercion pg_lg: LabeledGraph >-> PreGraph.
  Local Coercion lg_gg: GeneralGraph >-> LabeledGraph.

  Variable g: Graph.
  Variable left_out_edge right_out_edge: V -> E.
  Context {BI: BiGraph g left_out_edge right_out_edge}.
  
  Definition update_GeneralGraph (x l r: V) (sound': P _): Graph :=
    @Build_GeneralGraph V E EV EE DV DE P (update_LabeledGraph g left_out_edge right_out_edge x l r) sound'.

End ADD_GENERAL_GRAPH_GEN.

Section GRAPH_DISJOINT_UNION.

  Context {V E: Type}.
  Context {EV: EqDec V eq}.
  Context {EE: EqDec E eq}.
  Context {DV DE: Type}.

  Local Coercion pg_lg: LabeledGraph >-> PreGraph.

  Definition disjointed_guard (PV1 PV2: V -> Prop) (PE1 PE2: E -> Prop) :=
    Disjoint _ PV1 PV2 /\ Disjoint _ PE1 PE2.

  (* In assumption, why need decidability in Type? Because we need at least an existence (in Prop) of a function, which requires decidability in Type. *)
  (* In conclusion, it is possible to generate this stronger existential (In Type) property. *) 
  Definition disjointed_union_labeledgraph_exists_ll: forall (G1 G2: LabeledGraph V E DV DE),
    disjointed_guard (vvalid G1) (vvalid G2) (evalid G1) (evalid G2) ->
    (forall v, Decidable (vvalid G1 v)) ->
    (forall e, Decidable (evalid G1 e)) ->
    { G: LabeledGraph V E DV DE | 
      guarded_labeled_graph_equiv (vvalid G1) (evalid G1) G1 G /\
      guarded_labeled_graph_equiv (vvalid G2) (evalid G2) G2 G /\
      Prop_join (evalid G1) (evalid G2) (evalid G) /\
      Prop_join (evalid G1) (evalid G2) (evalid G)}.
  Proof.
    intros.
    exists
      (Build_LabeledGraph _ _
        (@Build_PreGraph V E _ _
          (fun v => vvalid G1 v \/ vvalid G2 v)
          (fun e => evalid G1 e \/ evalid G2 e)
          (fun e => if (X0 e) then src G1 e else src G2 e)
          (fun e => if (X0 e) then dst G1 e else dst G2 e))
        (fun v => if (X v) then vlabel G1 v else vlabel G2 v)
        (fun e => if (X0 e) then elabel G1 e else elabel G2 e)).
    split; [| split; [| split]].
    + rewrite guarded_lge_spec.
      simpl; split; [split; [| split; [| split]] | split].
      - firstorder.
      - firstorder.
      - intros.
        destruct (X0 e); tauto.
      - intros.
        destruct (X0 e); tauto.
      - intros.
        destruct (X v); tauto.
      - intros.
        destruct (X0 e); tauto.
    + rewrite guarded_lge_spec.
      simpl; split; [split; [| split; [| split]] | split].
      - firstorder.
      - firstorder.
      - intros.
        destruct H as [_ H].
        rewrite Disjoint_spec in H.
        destruct (X0 e); auto. firstorder.
      - intros.
        destruct H as [_ H].
        rewrite Disjoint_spec in H.
        destruct (X0 e); auto. firstorder.
      - intros.
        destruct H as [H _].
        rewrite Disjoint_spec in H.
        destruct (X v); auto. firstorder.
      - intros.
        destruct H as [_ H].
        rewrite Disjoint_spec in H.
        destruct (X0 e); auto. firstorder.
    + simpl; split.
      - firstorder.
      - destruct H as [_ ?]; rewrite Disjoint_spec in H; auto.
    + simpl; split.
      - firstorder.
      - destruct H as [_ ?]; rewrite Disjoint_spec in H; auto.
  Qed.

  Definition disjointed_union_pregraph_exists_l: forall (G1 G2: PreGraph V E),
    Disjoint _ (evalid G1) (evalid G2) ->
    (forall e, Decidable (evalid G1 e)) ->
    { G: PreGraph V E | 
      guarded_structurally_identical (vvalid G1) (evalid G1) G1 G /\
      guarded_structurally_identical (vvalid G2) (evalid G2) G2 G /\
      Same_set (Union _ (vvalid G1) (vvalid G2)) (vvalid G) /\
      Prop_join (evalid G1) (evalid G2) (evalid G)}.
  Proof.
    intros.
    exists
      (@Build_PreGraph V E _ _
        (fun v => vvalid G1 v \/ vvalid G2 v)
        (fun e => evalid G1 e \/ evalid G2 e)
        (fun e => if (X e) then src G1 e else src G2 e)
        (fun e => if (X e) then dst G1 e else dst G2 e)).
    split; [| split; [| split]].
    + rewrite guarded_si_spec.
      simpl; split; [| split; [| split]].
      - firstorder.
      - firstorder.
      - intros.
        destruct (X e); tauto.
      - intros.
        destruct (X e); tauto.
    + rewrite guarded_si_spec.
      simpl; split; [| split; [| split]].
      - firstorder.
      - firstorder.
      - intros.
        rewrite Disjoint_spec in H.
        destruct (X e); auto. firstorder.
      - intros.
        rewrite Disjoint_spec in H.
        destruct (X e); auto. firstorder.
    + simpl.
      rewrite Same_set_spec; intro v.
      rewrite Union_spec; tauto.
    + simpl; split.
      - firstorder.
      - rewrite Disjoint_spec in H; auto.
  Qed.

  Definition disjointed_union_pregraph_exists_r: forall (G1 G2: PreGraph V E),
    Disjoint _ (evalid G1) (evalid G2) ->
    (forall e, Decidable (evalid G2 e)) ->
    { G: PreGraph V E | 
      guarded_structurally_identical (vvalid G1) (evalid G1) G1 G /\
      guarded_structurally_identical (vvalid G2) (evalid G2) G2 G /\
      Same_set (Union _ (vvalid G1) (vvalid G2)) (vvalid G) /\
      Prop_join (evalid G1) (evalid G2) (evalid G)}.
  Proof.
    intros.
    rewrite Disjoint_comm in H.
    destruct (disjointed_union_pregraph_exists_l G2 G1 H X) as [G ?H].
    exists G.
    rewrite Union_comm.
    rewrite Prop_join_comm.
    tauto.
  Qed.

End GRAPH_DISJOINT_UNION.