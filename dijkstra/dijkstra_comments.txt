Lemma path_cost_pos_gen: 
  forall g links starter,
    sound_dijk_graph g ->
    valid_path' g links ->
    inrange_graph (graph_to_mat g) ->
    0 <= starter ->
    starter <> inf ->
    0 <= fold_left careful_add (map (elabel g) links) starter.
Proof.
  intros. generalize dependent starter.
  induction links.
  - intros. simpl; trivial.
  - intros.
    assert (evalid g a). {
      destruct H as [? [? [? ?]]].
      simpl in H0. destruct links.
      - unfold strong_evalid in H0; destruct H0; trivial.
      - destruct H0; unfold strong_evalid in H0; destruct H0; trivial.
    }
    assert (H5 := H4).
    assert (H6 := H).
    destruct H as [? [? _]].
    unfold vertex_valid in H; unfold edge_valid in H7;
      rewrite H7, H in H4; destruct H4.
    simpl. specialize (H1 _ _ H8 H4).
    rewrite elabel_Znth_graph_to_mat; trivial.
    rewrite careful_add_clean; trivial.
    apply IHlinks.
    + simpl in H0.
      destruct links. simpl. trivial.
      destruct H0 as [_ [_ ?]]. trivial.
    + omega.
    + admit.
    + intro. rewrite H9 in H1. compute in H1.
      destruct H1. apply H10. reflexivity. 
Abort. (* this lemma is not actually used *)

(*
Lemma dijkstra_correct_priq_irrel:
  forall g src prev priq dist i new,
    Zlength priq = SIZE ->
    0 <= i < Zlength priq ->
    Znth i priq < inf ->
    new < inf ->
    dijkstra_correct g src prev priq dist ->
    dijkstra_correct g src prev (upd_Znth i priq new) dist.
Proof.
  unfold SIZE.
  unfold dijkstra_correct. intros.
  assert (new <> inf + 1) by omega.
  assert (Znth i priq <> inf + 1) by omega.
  rewrite get_popped_unchanged in * by assumption. 
  split; intros. 
  - apply H3; trivial.
  - mit.
    (*rewrite upd_Znth_Zlength in H7 by assumption.
    apply H3; trivial.       
    destruct (Z.eq_dec dst i).  
    + rewrite e. assumption.
    + rewrite upd_Znth_diff in H8; assumption. *)
mited. *)
(* Qed. *)

(* Even if I state this functionally, 
   it doesn't matter if prev[i] has been changed.
   This is because we only look at _those_
   cells of prev for which the vertices 
   have been popped. 
   We have a proof that i has not been popped.
 *)
Lemma dijkstra_correct_prev_irrel:
  forall g src prev priq dist i new,
    0 <= i < Zlength priq ->
    new <> inf + 1 ->
    dijkstra_correct g src prev priq dist ->
    dijkstra_correct g src (upd_Znth i prev new) priq dist.
Proof.
  intros. unfold dijkstra_correct in *. intros.
  split; intros.
  (* apply H1. assumption. *)
Abort. (* may now be impossible to show like this *)



        (*
           assert (Znth u priq_contents <> inf + 1). {
             (* maybe lemma *)
 (* comes from the fact that priq_contents is not empty, 
    and that u was found to be the min *) 
             clear -H13 Hequ H9.
             rewrite <- isEmpty_in' in H13.
             destruct H13 as [? [? ?]].
             apply fold_min in H.
             remember (fold_right Z.min (hd 0 priq_contents) priq_contents).
             subst u. intro.
             rewrite Znth_find in H1. omega.
             subst z.
             rewrite <- Znth_0_hd by (unfold SIZE in *; omega).
             apply min_in_list; [ apply incl_refl | apply Znth_In; unfold SIZE in *; omega].
           }
           (* math stuff *)  
           unfold dijkstra_correct. intros. 
           destruct (Z.eq_dec dst u).
           (* ie, are you the new entrant or an old-timer? *) 
 ++ (* the new entrant *)   
   subst dst; split3; intros.  
    ** (* there is actually work to do here:
          u is not in popped, 
          but dst is in the new popped. 
          so we're deadling with exactly the new entrant. 
          we must show that it is worthy. *)
       (* Solution: find the path to mom, u's prev.
          the path we need is p2mom +:: mom2u *)
       assert (Znth u priq_contents < inf). {
         assert (Znth u priq_contents <> inf). {
           intro.
           rewrite <- isEmpty_in' in H13.
           destruct H13 as [? [? ?]].
           pose proof (fold_min _ _ H13).
           rewrite Hequ in H29.
           rewrite Znth_find in H29. omega.
           unfold VType in *.   
           rewrite <- Znth_0_hd by omega.
           apply min_in_list; [apply incl_refl | apply Znth_In; omega].
           }
         pose proof (Forall_Znth _ _ _ H14 H8).
         Opaque inf.
         simpl in H30.
         Transparent inf.
         rep_omega.
       } 
       destruct (H4 u) as [_ [? _]]. 
       destruct (Z.eq_dec u src).
       1: { rewrite e in *.
            exists (src, []).
            split3.
            - split3; [| | split3]; simpl; trivial.
              + destruct H2 as [? [? [? ?]]].
                unfold vertex_valid in H2.
                rewrite H2. omega.
              + unfold path_ends; simpl; split; trivial.
              + unfold path_cost. simpl. compute. omega.
            - unfold path_globally_optimal; intros.
              unfold path_cost at 1. simpl.
              apply path_cost_pos; trivial.
            - rewrite Forall_forall; intros. inversion H31.
       }
       assert (u <> src) by trivial.
       assert (u <> src) by trivial.
       specialize (H30 H14 H29 H32).  
       destruct H30 as [? [p2mom [? [? [? [? ?]]]]]].
       unfold VType in *.
       remember (Znth u prev_contents) as mom. 
       exists (fst p2mom, snd p2mom +:: (mom, u)). 
       split3; trivial.  
       --- unfold path_globally_optimal in *; intros.
    (* this alternate path either went through
       the subgraph to some mom' + one step, or not. *)
    (* if yes, then we can use H37 *)
    (* if no, then it loses by default because
       the cost to go to mom' > cost to u anyway! *)

admit.

(*destruct p' as [src' links2u].
           destruct H39. simpl in H39. subst src'.
           
           rewrite <- path_cost_app_cons; trivial; try omega.
 *)          
       --- simpl. apply entirely_in_subgraph_upd; trivial.
    ** exfalso. 
       rewrite upd_Znth_same in H29. omega.
       rewrite upd_Znth_Zlength in H28; trivial.
    ** rewrite upd_Znth_same in H29. omega.
       rewrite upd_Znth_Zlength in H28; trivial.
 ++ (* now prove the whole thing for a dst that's not u.
       ie, we're talking about an old-timer.
       This old-timer could have been in subgraph or
       in fringe, so we'll have to deal with both cases *)
   split3; intros.   
   ** (* dst is in subgraph. 
         show that adding u didn't mess anything up *)
     assert (0 <= dst < Zlength priq_contents).
       { apply get_popped_range in H28.
         rewrite upd_Znth_Zlength in H28; trivial. }
       apply get_popped_irrel_upd in H28; try assumption.
       unfold dijkstra_correct in H4.
       destruct (H4 dst) as [? _]. 
       destruct (H30 H28) as [p2dst [? [? ?]]].
       exists p2dst.
       split3; trivial.
       rewrite Forall_forall; intros.
       rewrite Forall_forall in H33.
       specialize (H33 _ H34).
       destruct H33. 
       pose proof (get_popped_range _ _ H33). 
       pose proof (get_popped_range _ _ H35).
       split; rewrite <- get_popped_irrel_upd;
         trivial; intro; apply H12;
       (* Both these cases are impossible for 
          an interesting reason:
          - x is in p2dst, a legal path.
          - so snd x and fst x are in get_popped
          - but u is not in get_popped. *)
           rewrite H38 in *; 
           apply get_popped_meaning; trivial.
   **   (* dst is an old-timer from the fringe. 
           show that moving 
           u from the fringe to the subgraph won't
           screw anything up *)
     (* the main point is that it's possible to reach
        dst via some subgraph-internal path + one hop.
        plan: use the same path as before this tweak. *)
     rewrite upd_Znth_Zlength in H28 by trivial.
     rewrite upd_Znth_diff in H29 by trivial.
     unfold dijkstra_correct in H4.
     destruct (H4 dst) as [_ [? _]]. 
     specialize (H31 H28 H29 H30). 
     destruct H31 as [? [p2mom [? [? [? [? ?]]]]]].
     split. 
     1: { apply get_popped_irrel_upd; trivial.
          apply get_popped_range; trivial.
          intro. rewrite H37 in *.
          apply H12. apply get_popped_meaning; trivial. }
     exists p2mom.  
     remember (Znth dst prev_contents) as mom.
     unfold VType in *. rewrite <- Heqmom in *.  
     split3; [| | split3]; trivial.   
     --- assert (mom <> u). { 
           intro. apply H12. rewrite <- H37.
           apply get_popped_meaning;
             [apply get_popped_range|]; trivial. }
         rewrite Forall_forall; intros.
         rewrite Forall_forall in H34. 
         destruct (H34 _ H38).
         pose proof (get_popped_range _ _ H39).
         pose proof (get_popped_range _ _ H40).
         split; apply get_popped_irrel_upd;
           trivial; intro; apply H12;
             rewrite H43 in *;
             apply get_popped_meaning; trivial.
     --- intros.
         destruct (Z.eq_dec mom' u).
         +++ admit.
         +++ apply H36.
             destruct H37 as [? [? [? ?]]].
             split3; [| |split]; trivial.   
             *** pose proof (get_popped_range _ _ H37).
                 rewrite upd_Znth_Zlength in H41 by trivial.
                 apply get_popped_irrel_upd in H37; trivial.
             *** rewrite Forall_forall; intros.
                 rewrite Forall_forall in H40. 
                 destruct (H40 _ H41).
                 pose proof (get_popped_range _ _ H42).
                 pose proof (get_popped_range _ _ H43).
                 rewrite upd_Znth_Zlength in H44, H45; trivial.
                 apply get_popped_irrel_upd in H42; trivial.
                 apply get_popped_irrel_upd in H43; trivial.
                 split; trivial.
         (* this makes sense --
            u is now gone from the fringe, 
            so if there was a path link on the way to 
            dst that passed through u, then...?

            good news: the path could not have
            passed through u, since u was not in 
            the subgraph!
          *)
         admit. admit. (* not sure... *)
   ** (* dst was unseen, and now we must show
         that moving u from fringe to subgraph
         won't change that. 
       *)
     (* plan: should be unaffected. use old. *)

     destruct (H4 dst) as [_ [_ ?]]. 
     apply H33; trivial. 
     2: rewrite upd_Znth_diff in H29; trivial. 
     1,2: rewrite upd_Znth_Zlength in H28; trivial.
     1: { rewrite <- get_popped_irrel_upd in H30; trivial.
          apply get_popped_range in H30.
          rewrite upd_Znth_Zlength in H30; trivial.
          admit. }  (* not sure... *)
      rewrite Forall_forall; intros.
      rewrite Forall_forall in H32.
      destruct (H32 _ H34).
      rewrite <- get_popped_irrel_upd in H35; try omega.
      rewrite <- get_popped_irrel_upd in H36; try omega.
      split; trivial.
      apply get_popped_range in H36. rewrite upd_Znth_Zlength in H36; trivial.
      2: apply get_popped_range in H35; rewrite upd_Znth_Zlength in H35; trivial.
      admit. admit. (* not sure. similar to earlier.
                       how to show that it could not 
                       have gone through u? *)  *)

     (*   destruct (H18 dst H48 H46 H47) as [? [? ?]].
          split3.
             *** rewrite H49.
                 rewrite <- Heqcost.
                 remember (upd_Znth dst dist_contents (Znth u dist_contents + cost)).
                 destruct (Z.eq_dec u i).
                 ---- rewrite <- e.
                      rewrite (H3 u) by omega.
                      rewrite Z.add_0_r.
                      admit. (* easy *)
                 ---- 
                      
                      
                      rewrite upd_Znth_same. upd_Znth_diff; try rep_omega.
             rewrite (H3 u) by trivial.
             rewrite Z.add_0_r.
             apply H18; trivial.

             
             rewrite H49, H50, H51.


         
         destruct H48; [assert (dst <> i) by omega|]; destruct (Z.eq_dec u i).

(*         
         unfold cost_was_improved_if_possible. intros.
         remember (find priq_contents (fold_right Z.min (hd 0 priq_contents) priq_contents) 0) as u.
         assert (0 <= dst < i \/ dst = i) by omega.
         unfold cost_was_improved_if_possible in H20.
         destruct H47; [assert (dst <> i) by omega|]; destruct (Z.eq_dec u i). 
         +++ rewrite <- e, upd_Znth_same, upd_Znth_diff; try rep_omega.
             rewrite (H3 u) by trivial.
             rewrite Z.add_0_r. apply H18; trivial.
         +++ repeat rewrite upd_Znth_diff; try rep_omega.
             apply H18; trivial.
         +++ rewrite H47, <- e.
             repeat rewrite upd_Znth_same.
             rewrite (H3 u) by trivial.
             omega. rep_omega.
         +++ rewrite H47, upd_Znth_same, upd_Znth_diff; [reflexivity | rep_omega..]. *)
         *)

         (*
       (* Important Spot #2: 
            We just "saw" a better way to get to i: via u.
            The three arrays have all changed in response.
        *)
         (*
       remember (find priq_contents (fold_right Z.min (hd 0 priq_contents) priq_contents) 0) as u.
       intro. *)
       (* plan: 
           if dst is i
            if dst is in subgraph -- impossible!
            else if in fringe -- show all is well, 
                 using {path to u +:: (u,i)}.
           else if dst <> i
            if dst is in subgraph -- completely unaffected
            else if dst is a different fringe item -- 
                                     completely unaffected *)
       destruct (Z.eq_dec dst i). 
       (* the interesting case is when dst = i *)
       +++ subst dst; split3.  
           *** intros.
               (* we can't be here -- 
                  i was not popped before, 
                  and the changes we just made 
                  do not constitute a pop *)
               exfalso.
               rewrite get_popped_meaning in H12.
               2: rewrite upd_Znth_Zlength; omega.
               rewrite upd_Znth_same in H12 by omega.
               rewrite H12 in H35.
               repeat rewrite Zlength_map in H36.
               pose proof (Forall_Znth _ _ i H36 H24).
               simpl in H50. omega.
           *** intros.     
               (* the new "mom" is just u
                  we're going to pass it 
                  the path to u and show that
                  nothing got screwed up
                *)
               unfold VType in *.
               subst mom. rewrite upd_Znth_same by omega.
               rewrite upd_Znth_same in H50 by omega.
               rewrite upd_Znth_Zlength in H12 by omega.
               destruct (H20 u) as [? _]. 
               split.
               1: { apply get_popped_irrel_upd; trivial; try omega.
                    intro.
                    apply H37.
                    rewrite <- H53.
                    apply get_popped_meaning; trivial; omega. }
               specialize (H52 H18).               
               destruct H52 as [p2u [? [? ?]]].
               exists p2u.  
               split3; [| | split3]; trivial.    
 ---- unfold path_correct in *.
      destruct H52 as [? [? [? [? ?]]]].
      split3; [| | split3]; trivial.
      ++++ rewrite upd_Znth_diff; try omega.
           intro. apply H37. subst i.
           apply get_popped_meaning; omega.
      ++++ unfold VType in *.
           rewrite Forall_forall. intros.
           rewrite Forall_forall in H58, H54.
           specialize (H58 _ H59).
           specialize (H54 _ H59); destruct H54.
           pose proof (get_popped_range _ _ H60).
           rewrite upd_Znth_diff; try omega.
           intro. apply H37.
           rewrite H62 in *.
           apply get_popped_meaning; trivial.
 ---- unfold VType in *.
      rewrite Forall_forall; intros.
      rewrite Forall_forall in H54. specialize (H54 _ H55).
      destruct H54.
      pose proof (get_popped_range _ _ H54).
      pose proof (get_popped_range _ _ H56).
      split; apply get_popped_irrel_upd; trivial; try omega; intro; apply H37;
      rewrite H59 in *; apply get_popped_meaning; trivial.
 ---- unfold VType in *.
      unfold path_correct in *.
      destruct H52 as [? [? [? [? ?]]]].
      split3; [ | | split3].
      ++++ destruct H55.
           apply valid_path_app_cons; trivial;
             rewrite <- surjective_pairing; trivial.
      ++++ rewrite (surjective_pairing p2u) in *.
           simpl.
           replace (fst p2u) with src in *.
           apply path_ends_app_cons; trivial.
           destruct H55. simpl in H55; omega.
      ++++ rewrite <- path_cost_app_cons; trivial.
           rewrite <- H57. omega.
      ++++ rewrite <- path_cost_app_cons; trivial.
           rewrite upd_Znth_same by omega.
           rewrite <- H57. omega.
      ++++ unfold VType in *.
           rewrite Forall_forall. intros.
           rewrite Forall_forall in H58, H54.
           apply in_app_or in H59. destruct H59.
           **** specialize (H58 _ H59).
                specialize (H54 _ H59).
                destruct H54.
                pose proof (get_popped_range _ _ H60).
                rewrite upd_Znth_diff; try omega.
                intro. apply H37.
                rewrite H62 in *;
                  apply get_popped_meaning; trivial.
           **** simpl in H59. destruct H59; [| omega].
                rewrite (surjective_pairing x) in *.
                simpl. inversion H59.
                rewrite upd_Znth_same; trivial.
                omega.
 ---- intros.
      destruct H55 as [? [? [? ?]]].
      rewrite <- get_popped_irrel_upd in H55; trivial; try omega.
      2: apply get_popped_range in H55;
        rewrite upd_Znth_Zlength in H55; trivial. 
      2: { intro. rewrite H59 in H55.
           rewrite get_popped_meaning in H55.
           rewrite upd_Znth_same in H55; omega.
           rewrite upd_Znth_Zlength; omega. }
      unfold VType in *.  
      destruct H52 as [? [? [? [? ?]]]].
      destruct H56 as [? [? [? [? ?]]]]. 
      rewrite <- path_cost_app_cons; trivial; try omega.
      rewrite <- H61. 
      apply (Z.le_trans _ (Znth i dist_contents') _).
      1: omega. 
      destruct (Z.eq_dec (Znth i priq_contents') inf).
      ++++ destruct (H20 i) as [_ [_ ?]].  
           assert (0 <= i < Zlength priq_contents') by 
             omega.  
           specialize (H67 H68 e).
           rewrite H67; trivial; try omega.
           **** split3; [| | split3]; trivial.
           rewrite <- H65.
           rewrite upd_Znth_diff; trivial; try omega.
           replace (Zlength dist_contents') with (Zlength priq_contents') by omega. 
           apply get_popped_range; trivial.
           intro.
           apply H37. rewrite <- H69. 
           apply get_popped_meaning; trivial.
           apply get_popped_range; trivial.
           rewrite Forall_forall; intros. 
           rewrite Forall_forall in H66, H58. 
           specialize (H66 _ H69). rewrite <- H66.
           specialize (H58 _ H69). destruct H58.
           unfold VType in *.
           rewrite upd_Znth_diff; trivial; try omega.
           pose proof (get_popped_range _ _ H70).
           rewrite upd_Znth_Zlength in H71. omega.
           omega.
           pose proof (get_popped_range _ _ H70).
           intro. rewrite get_popped_meaning in H70.
           rewrite H72 in H70.
           rewrite upd_Znth_same in H70.
           omega. trivial. omega.
           **** rewrite Forall_forall; intros.
           rewrite Forall_forall in H58.
           specialize (H58 _ H69); destruct H58.
           rewrite <- get_popped_irrel_upd in H58, H70;
             trivial; try omega.
           split; trivial.
           apply get_popped_range in H70.
           rewrite upd_Znth_Zlength in H70; trivial.
           2: apply get_popped_range in H58;
               rewrite upd_Znth_Zlength in H58; trivial.
           intro. rewrite H71 in *. 
           rewrite get_popped_meaning in H70.
           rewrite upd_Znth_same in H70; omega.
           rewrite upd_Znth_Zlength; omega.
           intro. rewrite H71 in *.
           rewrite get_popped_meaning in H58.
           rewrite upd_Znth_same in H58; omega.
           rewrite upd_Znth_Zlength; omega.
      ++++ destruct (H20 i) as [_ [? _]].
           assert (0 <= i < Zlength priq_contents') by omega. 
           assert (Znth i priq_contents' < inf). { 
             pose proof (Forall_Znth _ _ _ H68 H23).
             Opaque inf. simpl in H69. omega. }
           specialize (H67 H68 H69 H51). 
           destruct H67 as [? [? [? [? [? [? ?]]]]]].
           destruct H73 as [? [? [? [? ?]]]].
           rewrite H77. 
           apply H74; trivial.
           split3; [| | split]; trivial.
           **** split3; [| | split3]; trivial.
                ----- rewrite <- H65.
                rewrite upd_Znth_diff; try omega.
                1: replace (Zlength dist_contents') with (Zlength priq_contents') by omega;  
                  apply get_popped_range; trivial.
                intro.
                apply H37. rewrite <- H79.
                apply get_popped_meaning; trivial.
                apply get_popped_range; trivial.
                ----- rewrite Forall_forall; intros.
                rewrite Forall_forall in H66.
                unfold VType in *. 
                pose proof (H66 _ H79). rewrite <- H80.
                rewrite Forall_forall in H58.
                destruct (H58 _ H79). 
                pose proof (get_popped_range _ _ H82).
                rewrite upd_Znth_Zlength in H83; trivial.
                unfold VType in *.
                rewrite upd_Znth_diff; trivial; try omega.
                intro.
                rewrite H84 in *.
                rewrite get_popped_meaning in H82.
                rewrite upd_Znth_same in H82.
                omega. omega.
                rewrite upd_Znth_Zlength.
                assumption.
                assumption.
           **** rewrite Forall_forall; intros.
                rewrite Forall_forall in H66. 
                pose proof (H66 _ H79).
                rewrite Forall_forall in H58.
                destruct (H58 _ H79). 
                pose proof (get_popped_range _ _ H81).
                pose proof (get_popped_range _ _ H82).
                rewrite upd_Znth_Zlength in H83, H84; trivial.
                unfold VType in *.
                rewrite <- get_popped_irrel_upd in H81; try omega.
                rewrite <- get_popped_irrel_upd in H82; try omega.
                split; trivial.
                ----- intro.
                rewrite H85 in *.
                rewrite get_popped_meaning in H82.
                rewrite upd_Znth_same in H82 by omega.
                omega.
                rewrite upd_Znth_Zlength by omega. omega.
                ----- intro.
                rewrite H85 in *.
                rewrite get_popped_meaning in H81.
                rewrite upd_Znth_same in H81 by omega.
                omega.
                rewrite upd_Znth_Zlength by omega. omega.
           *** intros. rewrite upd_Znth_same in H50.
               destruct (H20 i) as [_ [_ ?]].
               apply H54; trivial; try omega.
               repeat rewrite upd_Znth_Zlength in H36.
               unfold VType in *.
               omega.
       +++ (* the "easier" case: dst <> i *) 
         split3; intros.     
         *** (* when dst was in the subgraph *)
           assert (0 <= dst < Zlength priq_contents). {
             apply get_popped_range in H12.
             rewrite upd_Znth_Zlength in H12; omega. }
           rewrite <- get_popped_irrel_upd in H12 by omega.
           destruct (H20 dst) as [? _].
           destruct (H51 H12) as [p2dst [? [? ?]]].
           exists p2dst. split3; trivial.   
 ---- destruct H52 as [? [? [? [? ?]]]].
      split3; [| | split3]; trivial.
      ++++ rewrite upd_Znth_diff; trivial; omega.
      ++++ unfold VType in *.
           rewrite Forall_forall; intros.
           rewrite Forall_forall in H58, H54. 
           specialize (H58 _ H59).
           specialize (H54 _ H59); destruct H54.
           pose proof (get_popped_range _ _ H60).
           rewrite upd_Znth_diff; trivial; try omega.
           intro. apply H37.
           rewrite H62 in H60, H61.
           apply get_popped_meaning; trivial.
 ---- unfold VType in *.
      rewrite Forall_forall; intros.
      rewrite Forall_forall in H54.
      specialize (H54 _ H55); destruct H54.
      pose proof (get_popped_range _ _ H54).
      pose proof (get_popped_range _ _ H56).
      split; apply get_popped_irrel_upd; trivial;
        try omega; intro; apply H37;
      rewrite H59 in *;
      apply get_popped_meaning; trivial.
         *** (* when dst was in the fringe *)
           unfold VType in *.
           subst mom;
             remember (Znth dst (upd_Znth i prev_contents' u)) as mom.
           rewrite upd_Znth_Zlength in H12.
           rewrite upd_Znth_diff in Heqmom, H50; try omega.
           2: rewrite H26; trivial.
           destruct (H20 dst) as [_ [? _]].
           specialize (H52 H12 H50 H51). unfold VType in *.
           destruct H52 as [? [p2mom [? [? [? [? ?]]]]]].
           rewrite <- Heqmom in *.
           split.
           1: { apply get_popped_irrel_upd; trivial; try omega.
                apply get_popped_range; trivial.
                intro. apply H37.
                rewrite <- H58.
                apply get_popped_meaning; trivial.
                apply get_popped_range; trivial. }
           exists p2mom; split3; [| | split3]; trivial.   
 ---- unfold path_correct in *. 
      destruct H53 as [? [? [? [? ?]]]].
      split3; [| | split3]; trivial.
      ++++ pose proof (get_popped_range _ _ H52).
           rewrite upd_Znth_diff; trivial; try omega.
           intro. apply H37.
           rewrite H63 in *;
             apply get_popped_meaning; trivial.
      ++++ unfold VType in *.
           rewrite Forall_forall; intros.
           rewrite Forall_forall in H61, H55.
           specialize (H61 _ H62).
           specialize (H55 _ H62). destruct H55.
           pose proof (get_popped_range _ _ H63).
           rewrite upd_Znth_diff; trivial; try omega.
           intro.
           apply H37.
           rewrite H65 in *;
             apply get_popped_meaning; trivial.
 ---- rewrite Forall_forall; intros.
      rewrite Forall_forall in H55. 
      specialize (H55 _ H58). destruct H55.
      pose proof (get_popped_range _ _ H55).
      pose proof (get_popped_range _ _ H59).
      split; apply get_popped_irrel_upd; trivial;
        try omega; intro; apply H37;
      rewrite H62 in *;
      apply get_popped_meaning; trivial.
 ---- unfold path_correct.
      unfold path_correct in H56.
      destruct H56 as [? [? [? [? ?]]]].
      split3; [ | | split3]; trivial.
      ++++ rewrite upd_Znth_diff; trivial; try omega.
      ++++ unfold VType in *.
           rewrite Forall_forall; intros.
           rewrite Forall_forall in H61, H55.
           simpl in H61, H62.
           rewrite upd_Znth_diff; trivial; try omega.
           apply H61; trivial.
           apply in_app_or in H62. destruct H62. 
           **** destruct (H55 _ H62) as [_ ?].
                apply get_popped_range in H63.
                omega.
           **** simpl in H62. destruct H62; [|omega].
                rewrite (surjective_pairing x) in *.
                simpl. inversion H62; omega.
           **** intro. apply in_app_or in H62.
                destruct H62.
                ----- destruct (H55 _ H62) as [_ ?].
                rewrite H63 in H64.
                apply H37.
                pose proof (get_popped_range _ _ H64).
                apply get_popped_meaning; trivial.
                ----- simpl in H62. destruct H62; [|omega].
                rewrite (surjective_pairing x) in *.
                inversion H62. simpl in H63. omega.
 ---- intros. 
      apply H57.
      destruct H58 as [? [? [? ?]]].
      split3; [| |split]; trivial.
      ++++ apply get_popped_irrel_upd in H58; trivial; try omega.
           apply get_popped_range in H58; rewrite upd_Znth_Zlength in H58; trivial; try omega.
           intro. apply H37.
           rewrite H63 in H58.
           rewrite get_popped_meaning in H58.
           rewrite upd_Znth_same in H58; omega.
           repeat rewrite Zlength_map in H36.
           rewrite upd_Znth_Zlength; omega.
      ++++ destruct H59 as [? [? [? [? ?]]]].
           split3; [| | split3]; trivial.
           **** rewrite <- H64. rewrite upd_Znth_diff; trivial; try omega.
                apply get_popped_range in H58; rewrite upd_Znth_Zlength in H58; omega.
                intro. rewrite H66 in *.
                rewrite get_popped_meaning, upd_Znth_same in H58; trivial; try omega.
                rewrite upd_Znth_Zlength; omega.
           **** rewrite Forall_forall; intros.
                rewrite Forall_forall in H65, H61;
                  specialize (H65 _ H66);
                  specialize (H61 _ H66); destruct H61;
                    rewrite <- H65.
                unfold VType in *.
                rewrite upd_Znth_diff; trivial; try omega.
                replace (Zlength prev_contents') with (Zlength priq_contents') by omega.
                apply get_popped_range in H67; rewrite upd_Znth_Zlength in H67; trivial; try omega.
                intro.
                rewrite H68 in H67.
                apply get_popped_meaning in H67.
                rewrite upd_Znth_same in H67. omega.
                omega.
                rewrite upd_Znth_Zlength; omega.
      ++++ rewrite Forall_forall; intros.
           rewrite Forall_forall in H61;
             specialize (H61 _ H62); destruct H61.
           pose proof (get_popped_range _ _ H61).
           pose proof (get_popped_range _ _ H63).
           rewrite upd_Znth_Zlength in H64, H65 by omega.
           apply get_popped_irrel_upd in H61; trivial; try omega.
           apply get_popped_irrel_upd in H63; trivial; try omega.
           split; trivial.
           intro. rewrite H67 in H63.
           apply get_popped_meaning in H63.
           rewrite upd_Znth_same in H63. omega.
           omega. rewrite upd_Znth_Zlength; omega.
           intro. rewrite H67 in H61.
           apply get_popped_meaning in H61.
           rewrite upd_Znth_same in H61. omega.
           omega. rewrite upd_Znth_Zlength; omega.
         *** rewrite upd_Znth_Zlength in H12. 
           destruct (H20 dst) as [_ [_ ?]]. 
             apply H54; trivial; try omega.
             rewrite upd_Znth_diff in H50; trivial.
             2: rewrite <- get_popped_irrel_upd in H51; trivial.
             2: apply get_popped_range in H51;
                  rewrite upd_Znth_Zlength in H51; trivial.
             4: intro; rewrite H55 in H51;
               rewrite get_popped_meaning in H51.
             4: rewrite upd_Znth_same in H51; omega.
             4: rewrite upd_Znth_Zlength.
             all: unfold VType in *; try omega.
             clear H54; unfold path_correct in *.
             destruct H52 as [? [? [? [? ?]]]].
             split3; [| | split3]; trivial; try omega. 
             ---- rewrite <- H56.
                  rewrite upd_Znth_diff; trivial; try omega.
                  apply get_popped_range in H51.
                  rewrite upd_Znth_Zlength in H51; omega.
                  intro. rewrite H58 in H51.
                  rewrite get_popped_meaning in H51.
                  rewrite upd_Znth_same in H51. omega.
                  omega. rewrite upd_Znth_Zlength.
                  unfold VType in *. omega. omega.
             ---- rewrite Forall_forall; intros. 
                  rewrite Forall_forall in H57.
                  rewrite <- H57; trivial.
                  rewrite Forall_forall in H53.
                  specialize (H53 _ H58); destruct H53.
                  unfold VType in *. 
                  rewrite upd_Znth_diff; trivial.
                  apply get_popped_range in H59.
                  rewrite upd_Znth_Zlength in H59; try omega.
                  omega.
                  intro. rewrite H60 in H59.
                  rewrite get_popped_meaning in H59.
                  rewrite upd_Znth_same in H59. omega.
                  omega.
                  apply get_popped_range; trivial.
             ---- rewrite Forall_forall; intros.
                  rewrite Forall_forall in H53.
                  destruct (H53 _ H55).
                  rewrite <- get_popped_irrel_upd in H56, H57; trivial; try omega.
                  split; trivial.
                  apply get_popped_range in H57.
                  rewrite upd_Znth_Zlength in H57; omega.
                  2: apply get_popped_range in H56;
                    rewrite upd_Znth_Zlength in H56; omega.
                  intro. rewrite H58 in H57.
                  rewrite get_popped_meaning in H57.
                  rewrite upd_Znth_same in H57; omega.
                  apply get_popped_range; trivial.
                  intro. rewrite H58 in H56.
                  rewrite get_popped_meaning in H56.
                  rewrite upd_Znth_same in H56; omega.
                  apply get_popped_range; trivial. 
     --- repeat rewrite Zlength_map in H35.
         split3; apply inrange_upd_Znth;
           trivial; try omega.
         *) 